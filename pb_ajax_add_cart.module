<?php

/**
 * @file
 * Ajax add to cart module.
 *
 * Allows you to add products AJAX-ically to cart. You can remove products
 * AJAX-ically from cart.
 */

/**
 * Implements hook_form_alter().
 */
function pb_ajax_add_cart_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE) {
    $form['submit']['#ajax'] = array(
      'callback' => 'pb_ajax_add_cart_ajax_cart_form',
      'method' => 'replace',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Adding product'),
      ),    
    );

    // Rebuild form.
    $form['#submit'][] = 'pb_ajax_add_cart_rebuild_add_to_cart_form';
  }
}

/**
 * Rebuild add to cart form.
 *
 * @ingroup forms
 */
function pb_ajax_add_cart_rebuild_add_to_cart_form($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX-ify the product add to cart.
 *
 * AJAX callback for all Commerce add to cart form.
 *
 * @ingroup callbacks
 */
function pb_ajax_add_cart_ajax_cart_form(&$form, &$form_state) {
  $form_errors = form_get_errors();

  // AJAX commands array.
  $commands = array();

  if (!empty($form_errors)) {
    // Show Drupal status message without page refresh.
    // @see https://www.drupal.org/node/1271004#comment-7205478
    $commands[] = ajax_command_remove('div.messages');
    $commands[] = ajax_command_before('#main-content', theme('status_messages'));

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }

  // Get the current status of commerce cart.
  $commerce_cart = pb_ajax_add_cart_get_commerce_cart_details();
    
  if ($commerce_cart['order']) {
    $line_items = $commerce_cart['wrapper']->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
    
    if($quantity > 0){
      // Build the variables array to send to the cart block template.
      $cart_text = t('Cart'). ' (<span id="cart-quantity">'. $quantity .'</span>)';    
      $variables = array(
        'product_added_text' => t('Product added to cart'),
        'cart_contents' => l(
          $cart_text,
          'cart',
          array('html' => TRUE, 'attributes' => array('rel' => 'nofollow'))
         ),
      );
            
      $commands[] = pb_ajax_add_cart_command_html('div.ajax-shopping-cart', theme('pb_ajax_shopping_cart', $variables));
      // Show "Product added" notification
      $commands[] = ajax_command_css('.ajax-shopping-cart__product-added', array('display' => 'block'));
      
      return array(
        '#type' => 'ajax',
        '#commands' => $commands,
      );
    }             
  }
}

/**
 * Implements hook_block_info().
 */
function pb_ajax_add_cart_block_info() {
  $blocks['pb_ajax_shopping_cart'] = array(
    'info' => t('AJAX shopping cart'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pb_ajax_add_cart_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'pb_ajax_shopping_cart':
      // Get the current status of cart and other details.
      $commerce_cart = pb_ajax_add_cart_get_commerce_cart_details();
      // Default to an empty cart block message.  
      $cart_text = t('Cart'). ' (<span id="cart-quantity">0</span>)';
      $variables = array(
        'product_added_text' => t('Product added to cart'),
        'cart_contents' => $cart_text,
      );
      $block['content'] = theme('pb_ajax_shopping_cart', $variables);
          
      if ($commerce_cart['order']) {
        $line_items = $commerce_cart['wrapper']->commerce_line_items;
        $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
        
        if($quantity > 0){
          // Build the variables array to send to the cart block template.
          $cart_text = t('Cart'). ' (<span id="cart-quantity">'. $quantity .'</span>)';
          $variables = array(
            'product_added_text' => t('Product added to cart'),
            'cart_contents' => l(
              $cart_text,
              'cart',
              array('html' => TRUE, 'attributes' => array('rel' => 'nofollow'))
             ),
          );
          $block['content'] = theme('pb_ajax_shopping_cart', $variables);
          drupal_add_library('system', 'drupal.ajax', TRUE);
          drupal_add_js(drupal_get_path('module', 'pb_ajax_add_cart') . '/js/pb_ajax_add_cart_html.js');
        }             
      }
      break;    
  }

  return $block;
}

/**
 * This function returns the current status of cart.
 *
 * @return array
 *   Array containing the current status of cart.
 */
function pb_ajax_add_cart_get_commerce_cart_details() {
  global $user;
  $output = array();

  $order = commerce_cart_order_load($user->uid);

  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    $output['order'] = $order;
    $output['wrapper'] = $wrapper;
  }
  else {
    $output['order'] = NULL;
    $output['wrapper'] = NULL;
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function pb_ajax_add_cart_theme() {
  return array(
    'pb_ajax_shopping_cart' => array(
      'variables' => array(
        'product_added_text' => NULL,
        'cart_contents' => NULL,        
      ),
      'template' => 'templates/pb-ajax-shopping-cart',
    ),    
  );
}

/**
 * Creates a Ajax 'replace' command.
 *
 * This command is specifically for pb_ajax_add_cart module.
 * Unlike `ajax_command_replace()`, this command will not produce extra div
 * wrapper with 'display: block' style.
 *
 * This command is implemented by
 * Drupal.ajax.prototype.commands.pb_ajax_add_cart_html () defined in
 * js/pb_ajax_add_cart_html.js.
 *
 * @param string $selector
 *   A jQuery selector string. If the command is a response to a request from
 *   an #ajax form element then this value can be NULL.
 * @param string $html
 *   The data to use with the jQuery replaceWith() method.
 *
 * @return array
 *   An array suitable for use with the ajax_render() function.
 */
function pb_ajax_add_cart_command_html($selector, $html) {
  return array(
    'command' => 'pb_ajax_add_cart_html',
    'selector' => $selector,
    'data' => $html,
  );
}
